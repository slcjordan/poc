// Code generated by sqlc. DO NOT EDIT.
// source: search.sql

package dbsqlc

import (
	"context"
)

const searchGame = `-- name: SearchGame :many

SELECT id, score
FROM game
ORDER BY id LIMIT $1 OFFSET $2
`

type SearchGameParams struct {
	Limit  int32
	Offset int32
}

type SearchGameRow struct {
	ID    int64
	Score int32
}

// Search returns a list of games.
func (q *Queries) SearchGame(ctx context.Context, arg SearchGameParams) ([]SearchGameRow, error) {
	rows, err := q.db.Query(ctx, searchGame, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchGameRow
	for rows.Next() {
		var i SearchGameRow
		if err := rows.Scan(&i.ID, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
