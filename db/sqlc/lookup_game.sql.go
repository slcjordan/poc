// Code generated by sqlc. DO NOT EDIT.
// source: lookup_game.sql

package sqlc

import (
	"context"
)

const lookupGameDetail = `-- name: LookupGameDetail :one

SELECT game.id, score, max_times_through_deck, array_agg(piles) piles, array_agg(hist_moves) history
FROM game JOIN LATERAL (
  SELECT array_agg((suit, index, position) ORDER BY pile_index) piles
  FROM pile_card WHERE game_id = game.id
  GROUP BY pile_num ORDER BY pile_num
) p ON TRUE JOIN LATERAL(
  select array_agg(
    (old_pile_num, old_pile_index, old_pile_position, new_pile_num, new_pile_index, new_pile_position)
    ORDER BY old_pile_num, old_pile_index) hist_moves
  FROM history
  JOIN move ON move.id = history.move_id
  WHERE history.game_id = game.id
  GROUP BY move_number
) m ON TRUE WHERE game.id = $1 GROUP BY game.id
`

type LookupGameDetailRow struct {
	ID                  int64
	Score               int32
	MaxTimesThroughDeck int32
	Piles               interface{}
	History             interface{}
}

// Lookup a game.
func (q *Queries) LookupGameDetail(ctx context.Context, gameID int64) (LookupGameDetailRow, error) {
	row := q.db.QueryRow(ctx, lookupGameDetail, gameID)
	var i LookupGameDetailRow
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.MaxTimesThroughDeck,
		&i.Piles,
		&i.History,
	)
	return i, err
}
