// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockByteCaller is a mock of ByteCaller interface.
type MockByteCaller struct {
	ctrl     *gomock.Controller
	recorder *MockByteCallerMockRecorder
}

// MockByteCallerMockRecorder is the mock recorder for MockByteCaller.
type MockByteCallerMockRecorder struct {
	mock *MockByteCaller
}

// NewMockByteCaller creates a new mock instance.
func NewMockByteCaller(ctrl *gomock.Controller) *MockByteCaller {
	mock := &MockByteCaller{ctrl: ctrl}
	mock.recorder = &MockByteCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockByteCaller) EXPECT() *MockByteCallerMockRecorder {
	return m.recorder
}

// CallBytes mocks base method.
func (m *MockByteCaller) CallBytes(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallBytes", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallBytes indicates an expected call of CallBytes.
func (mr *MockByteCallerMockRecorder) CallBytes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBytes", reflect.TypeOf((*MockByteCaller)(nil).CallBytes), arg0, arg1)
}
