// Code generated by MockGen. DO NOT EDIT.
// Source: commands.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	poc "github.com/slcjordan/poc"
)

// MockStartGameCaller is a mock of StartGameCaller interface.
type MockStartGameCaller struct {
	ctrl     *gomock.Controller
	recorder *MockStartGameCallerMockRecorder
}

// MockStartGameCallerMockRecorder is the mock recorder for MockStartGameCaller.
type MockStartGameCallerMockRecorder struct {
	mock *MockStartGameCaller
}

// NewMockStartGameCaller creates a new mock instance.
func NewMockStartGameCaller(ctrl *gomock.Controller) *MockStartGameCaller {
	mock := &MockStartGameCaller{ctrl: ctrl}
	mock.recorder = &MockStartGameCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartGameCaller) EXPECT() *MockStartGameCallerMockRecorder {
	return m.recorder
}

// CallStartGame mocks base method.
func (m *MockStartGameCaller) CallStartGame(arg0 context.Context, arg1 poc.StartGame) (poc.StartGame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallStartGame", arg0, arg1)
	ret0, _ := ret[0].(poc.StartGame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallStartGame indicates an expected call of CallStartGame.
func (mr *MockStartGameCallerMockRecorder) CallStartGame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallStartGame", reflect.TypeOf((*MockStartGameCaller)(nil).CallStartGame), arg0, arg1)
}

// MockPerformMoveCaller is a mock of PerformMoveCaller interface.
type MockPerformMoveCaller struct {
	ctrl     *gomock.Controller
	recorder *MockPerformMoveCallerMockRecorder
}

// MockPerformMoveCallerMockRecorder is the mock recorder for MockPerformMoveCaller.
type MockPerformMoveCallerMockRecorder struct {
	mock *MockPerformMoveCaller
}

// NewMockPerformMoveCaller creates a new mock instance.
func NewMockPerformMoveCaller(ctrl *gomock.Controller) *MockPerformMoveCaller {
	mock := &MockPerformMoveCaller{ctrl: ctrl}
	mock.recorder = &MockPerformMoveCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformMoveCaller) EXPECT() *MockPerformMoveCallerMockRecorder {
	return m.recorder
}

// CallPerformMove mocks base method.
func (m *MockPerformMoveCaller) CallPerformMove(arg0 context.Context, arg1 poc.PerformMove) (poc.PerformMove, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallPerformMove", arg0, arg1)
	ret0, _ := ret[0].(poc.PerformMove)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallPerformMove indicates an expected call of CallPerformMove.
func (mr *MockPerformMoveCallerMockRecorder) CallPerformMove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallPerformMove", reflect.TypeOf((*MockPerformMoveCaller)(nil).CallPerformMove), arg0, arg1)
}

// MockListGamesCaller is a mock of ListGamesCaller interface.
type MockListGamesCaller struct {
	ctrl     *gomock.Controller
	recorder *MockListGamesCallerMockRecorder
}

// MockListGamesCallerMockRecorder is the mock recorder for MockListGamesCaller.
type MockListGamesCallerMockRecorder struct {
	mock *MockListGamesCaller
}

// NewMockListGamesCaller creates a new mock instance.
func NewMockListGamesCaller(ctrl *gomock.Controller) *MockListGamesCaller {
	mock := &MockListGamesCaller{ctrl: ctrl}
	mock.recorder = &MockListGamesCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListGamesCaller) EXPECT() *MockListGamesCallerMockRecorder {
	return m.recorder
}

// CallListGames mocks base method.
func (m *MockListGamesCaller) CallListGames(arg0 context.Context, arg1 poc.ListGames) (poc.ListGames, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallListGames", arg0, arg1)
	ret0, _ := ret[0].(poc.ListGames)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallListGames indicates an expected call of CallListGames.
func (mr *MockListGamesCallerMockRecorder) CallListGames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallListGames", reflect.TypeOf((*MockListGamesCaller)(nil).CallListGames), arg0, arg1)
}
